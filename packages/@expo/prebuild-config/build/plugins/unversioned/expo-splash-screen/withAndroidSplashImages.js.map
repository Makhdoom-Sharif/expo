{"version":3,"file":"withAndroidSplashImages.js","names":["_configPlugins","data","require","_fsExtra","_interopRequireDefault","_jimpCompact","_path","_getAndroidSplashConfig","obj","__esModule","default","SPLASH_SCREEN_FILENAME","DRAWABLES_CONFIGS","modes","light","path","dark","dimensionsMultiplier","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi","withAndroidSplashImages","config","logoWidth","withDangerousMod","setSplashImageDrawablesAsync","modRequest","projectRoot","exports","clearAllExistingSplashImagesAsync","splash","getAndroidSplashConfig","darkSplash","getAndroidDarkSplashConfig","Promise","all","setSplashImageDrawablesForThemeAsync","androidMainPath","join","Object","values","map","filePath","fs","pathExists","resolve","remove","theme","sizes","imageKey","image","Jimp","read","multiplier","width","height","Math","ceil","bitmap","canvasSize","canvas","create","input","clone","resize","x","y","output","blit","quality","outputPath","folder","dirname","ensureDir","writeAsync"],"sources":["../../../../src/plugins/unversioned/expo-splash-screen/withAndroidSplashImages.ts"],"sourcesContent":["import { ConfigPlugin, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\n// @ts-ignore\nimport Jimp from 'jimp-compact';\nimport path from 'path';\n\nimport {\n  AndroidPluginConfig,\n  getAndroidDarkSplashConfig,\n  getAndroidSplashConfig,\n  SplashScreenConfig,\n} from './getAndroidSplashConfig';\n\ntype DRAWABLE_SIZE = 'default' | 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype THEME = 'light' | 'dark';\n\nconst SPLASH_SCREEN_FILENAME = 'splashscreen_logo.png';\nconst DRAWABLES_CONFIGS: {\n  [key in DRAWABLE_SIZE]: {\n    modes: {\n      [key in THEME]: {\n        path: string;\n      };\n    };\n    dimensionsMultiplier: number;\n  };\n} = {\n  default: {\n    modes: {\n      light: {\n        path: `./res/drawable/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  mdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  hdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1.5,\n  },\n  xhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 2,\n  },\n  xxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 3,\n  },\n  xxxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 4,\n  },\n};\n\nexport const withAndroidSplashImages: ConfigPlugin<AndroidPluginConfig> = (\n  config,\n  { logoWidth = 100 }\n) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setSplashImageDrawablesAsync(config, config.modRequest.projectRoot, logoWidth);\n      return config;\n    },\n  ]);\n};\n\n/**\n * Deletes all previous splash_screen_images and copies new one to desired drawable directory.\n * If path isn't provided then no new image is placed in drawable directories.\n * @see https://developer.android.com/training/multiscreen/screendensities\n *\n * @param androidMainPath Absolute path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport async function setSplashImageDrawablesAsync(\n  config: Pick<ExpoConfig, 'android' | 'splash'>,\n  projectRoot: string,\n  logoWidth: number\n) {\n  await clearAllExistingSplashImagesAsync(projectRoot);\n\n  const splash = getAndroidSplashConfig(config);\n  const darkSplash = getAndroidDarkSplashConfig(config);\n\n  await Promise.all([\n    setSplashImageDrawablesForThemeAsync(splash, 'light', projectRoot, logoWidth),\n    setSplashImageDrawablesForThemeAsync(darkSplash, 'dark', projectRoot, logoWidth),\n  ]);\n}\n\nasync function clearAllExistingSplashImagesAsync(projectRoot: string) {\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    Object.values(DRAWABLES_CONFIGS).map(async ({ modes }) => {\n      await Promise.all(\n        Object.values(modes).map(async ({ path: filePath }) => {\n          if (await fs.pathExists(path.resolve(androidMainPath, filePath))) {\n            await fs.remove(path.resolve(androidMainPath, filePath));\n          }\n        })\n      );\n    })\n  );\n}\n\nexport async function setSplashImageDrawablesForThemeAsync(\n  config: SplashScreenConfig | null,\n  theme: 'dark' | 'light',\n  projectRoot: string,\n  logoWidth: number\n) {\n  if (!config) return;\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  const sizes: DRAWABLE_SIZE[] = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi'];\n\n  await Promise.all(\n    sizes.map(async (imageKey) => {\n      // @ts-ignore\n      const image = await Jimp.read(config[imageKey]);\n\n      if (image) {\n        const multiplier = DRAWABLES_CONFIGS[imageKey].dimensionsMultiplier;\n        const width = logoWidth * multiplier; // \"logoWidth\" must be replaced by the logo width chosen by the user in its config file\n        const height = Math.ceil(width * (image.bitmap.height / image.bitmap.width)); // compute the height according to the width and image ratio\n\n        // https://developer.android.com/develop/ui/views/launch/splash-screen#dimensions\n        const canvasSize = 288 * multiplier;\n        const canvas = await Jimp.create(canvasSize, canvasSize, 0xffffff00);\n        const input = image.clone().resize(width, height);\n\n        const x = (canvasSize - width) / 2;\n        const y = (canvasSize - height) / 2;\n\n        const output = canvas.blit(input, x, y).quality(100);\n\n        // Get output path for drawable.\n        const outputPath = path.join(\n          androidMainPath,\n          DRAWABLES_CONFIGS[imageKey].modes[theme].path\n        );\n\n        const folder = path.dirname(outputPath);\n        // Ensure directory exists.\n        await fs.ensureDir(folder);\n        await output.writeAsync(outputPath);\n      }\n      return null;\n    })\n  );\n}\n"],"mappings":"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"}